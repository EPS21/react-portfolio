{"version":3,"sources":["components/Background.js","components/Header.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Background","className","Header","Navbar","bg","expand","sticky","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Body","state","transparent","counter","transparentStyle","opacity","Fragment","Carousel","interval","src","alt","style","this","Caption","Jumbotron","fluid","Container","color","backgroundColor","padding","display","justifyContent","Button","onClick","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5fe69108.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Background() {\r\n  return (\r\n    <div className=\"background\">\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\n\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\r\n      <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#home\">Home</Nav.Link>\r\n          <Nav.Link href=\"http://www.google.com\">goto google</Nav.Link>\r\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>    \r\n        <Nav>\r\n          <Nav.Link href=\"#asdfasdf\">More Dank Memes</Nav.Link>\r\n        </Nav>    \r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport class Body extends Component {\r\n  state = {\r\n    transparent: false,\r\n    counter: 0\r\n  }\r\n\r\n  transparentStyle = () => {\r\n    if (this.state.transparent) {\r\n      return { opacity: .5 }\r\n    }\r\n    else {\r\n      return { opacity: 1 }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Carousel interval={null}>\r\n\r\n          <Carousel.Item>\r\n            <img\r\n              className=\"w-100\"\r\n              src=\"img/1.jfif\"\r\n              alt=\"First slide\"\r\n              style={this.transparentStyle()}\r\n            />\r\n            <Carousel.Caption>\r\n              <h3>First slide label</h3>\r\n              <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n            </Carousel.Caption>\r\n          </Carousel.Item>\r\n\r\n          <Carousel.Item>\r\n            <img\r\n              className=\"d-block w-100\"\r\n              src=\"img/2.jfif\"\r\n              alt=\"Third slide\"\r\n              style={this.transparentStyle()}\r\n            />\r\n            <Carousel.Caption>\r\n              <h3>Second slide label</h3>\r\n              <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n            </Carousel.Caption>\r\n          </Carousel.Item>\r\n\r\n          <Carousel.Item>\r\n            <img\r\n              className=\"d-block w-100\"\r\n              src=\"img/3.jfif\"\r\n              alt=\"Third slide\"\r\n              style={this.transparentStyle()}\r\n            />\r\n            <Carousel.Caption>\r\n              <h3>Third slide label</h3>\r\n              <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n            </Carousel.Caption>\r\n          </Carousel.Item>\r\n\r\n        </Carousel>\r\n        <Jumbotron fluid>\r\n          <Container>\r\n            <h1>Fluid jumbotron</h1>\r\n            <p>\r\n              This is a modified jumbotron that occupies the entire horizontal space of\r\n              its parent.\r\n            </p>\r\n          </Container>\r\n        </Jumbotron>\r\n        <Container>\r\n\r\n          <p style={{ color: 'red', backgroundColor: '#FFF', padding: '11px' }}>this is a bootstrap container</p>\r\n\r\n          <div className=\"btn-container\" style={{ display: 'flex', justifyContent: 'space-between'}}>\r\n            <Button onClick={() => this.setState({ transparent: !this.state.transparent })}>\r\n              {this.state.transparent ? 'Make Opaque' : 'Make Transparent'}\r\n            </Button>\r\n            <Button\r\n              // setState has optional \r\n              // onClick={() => this.setState(() => ({\r\n              //   counter: this.state.counter + 1\r\n              // })) } \r\n\r\n              onClick={() => this.setState({ counter: this.state.counter + 1 })}\r\n\r\n            >\r\n              Increment counter {this.state.counter}\r\n            </Button>\r\n          </div>\r\n\r\n\r\n        </Container>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Body\r\n","import React, { Component } from 'react'\nimport Background from './components/Background'\nimport Header from './components/Header'\nimport Body from './components/Body'\nimport './styles/App.css'\nimport './styles/BgStyle.css'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Background />\n        <Header />\n        <Body />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import 'bootstrap/dist/css/bootstrap.min.css'; // use cdn in index.html it'll load faster for users\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}